{"version":3,"sources":["Joke.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","state","fadeIn","toggle","bind","this","humor","setup","punchline","Card","CardBody","CardTitle","Button","color","onClick","Fade","in","className","CardText","setState","React","Component","App","jokes","jokeCards","map","Col","sm","Jumbotron","Container","fluid","Row","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAoCeA,E,YA/Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,QAAQ,GACvB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBAHG,E,sEAMT,IAAD,EACoBC,KAAKL,MAAMM,MAAhCC,EADC,EACDA,MAAOC,EADN,EACMA,UAEb,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAYJ,GACZ,kBAACK,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAST,KAAKF,QAAtC,SACA,kBAACY,EAAA,EAAD,CAAMC,GAAIX,KAAKJ,MAAMC,OAAQe,UAAU,QACrC,kBAACC,EAAA,EAAD,KAAWV,S,+BASrBH,KAAKc,SAAS,CACZjB,QAASG,KAAKJ,MAAMC,a,GA3BPkB,IAAMC,W,gCCwDVC,E,YArDb,aAAe,IAAD,8BACZ,+CACKrB,MAAQ,CACXsB,MAAO,CACL,CACEhB,MAAO,2CACPC,UAAW,gBAEb,CACED,MAAO,sDACPC,UAAW,2BAEb,CACED,MAAO,4CACPC,UAAW,2DAEb,CACED,MAAO,yDACPC,UAAW,oCAlBL,E,sEAyBZ,IAAIgB,EAAYnB,KAAKJ,MAAMsB,MAAME,KAAI,SAAAnB,GACnC,OACE,kBAACoB,EAAA,EAAD,CAAKT,UAAU,MAAMU,GAAG,KACtB,kBAAC,EAAD,CAAMrB,MAAOA,QAKnB,OACE,6BACE,kBAACsB,EAAA,EAAD,KACE,wBAAIX,UAAU,aAAd,cACA,uBAAGA,UAAU,QAAb,oEACA,wBAAIA,UAAU,SACd,oDACA,uBAAGA,UAAU,UAGf,kBAACY,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACGP,S,GA9CKJ,IAAMC,WCMJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8ecf71f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Button, Card, CardBody, CardTitle, CardText, Fade } from 'reactstrap';\r\n\r\nclass Joke extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { fadeIn: false };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  render() {\r\n    let { setup, punchline } = this.props.humor;\r\n\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle>{setup}</CardTitle>\r\n            <Button color=\"primary\" onClick={this.toggle}>Magic</Button>\r\n            <Fade in={this.state.fadeIn} className='my-2'>\r\n              <CardText>{punchline}</CardText>\r\n            </Fade>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  toggle() {\r\n    this.setState({\r\n      fadeIn: !this.state.fadeIn\r\n    });\r\n  }\r\n}\r\n\r\nexport default Joke;\r\n","import React from 'react';\nimport Joke from './Joke.js';\nimport './App.css';\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jokes: [\n        {\n          setup: \"What time did the man go to the dentist?\",\n          punchline: \"Tooth hurt-y\"\n        },\n        {\n          setup: \"Did you hear about the guy who invented Lifesavers?\",\n          punchline: \"They say he made a mint\"\n        },\n        {\n          setup: \"Why do chicken coops only have two doors?\",\n          punchline: \"Because if they had four, they would be chicken sedans!\"\n        },\n        {\n          setup: \"Why did the Clydesdale give the pony a glass of water?\",\n          punchline: \"Because he was a little horse!\"\n        }\n      ]\n    }\n  }\n\n  render() {\n    let jokeCards = this.state.jokes.map(humor => {\n      return (\n        <Col className=\"p-3\" sm=\"4\">\n          <Joke humor={humor} />\n        </Col>\n      )\n    })\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1 className=\"display-3\">Joke Cards</h1>\n          <p className=\"lead\">Welcome to the next billion dollar app taking the world by storm</p>\n          <hr className=\"my-2\" />\n          <p>Prepare to be amused!</p>\n          <p className=\"lead\">\n          </p>\n        </Jumbotron>\n        <Container fluid>\n          <Row>\n            {jokeCards}\n          </Row>\n        </Container>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}